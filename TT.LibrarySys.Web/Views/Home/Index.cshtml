@model List<TT.LibrarySys.DataAccess.Models.Book>

<header>

    <link rel="stylesheet" href="~/css/site.css">
</header>
<h2 class="text-center my-4">Titan Tech Library</h2>

<div class="input-group mb-3">
    <input type="text" id="searchInput" onkeyup="filterBooks()" class="form-control" placeholder="Search for books by title, author, or ISBN">
    <div class="input-group-append">
        <span class="input-group-text"><i class="fas fa-search"></i></span>
    </div>
</div>

<form asp-action="BorrowBooks" method="post">

    <div id="booksGrid" class="row row-cols-1 row-cols-md-5 g-4">
        @foreach (var book in Model)
        {
            <div class="col mb-4 book-item">
                <div class="card h-100" style="background-color: #f8f9fa; border-radius: 10px; border: 1px solid #ddd;">
                    <div class="card-body text-center">
                        <h5 class="card-title text-primary">@book.Title</h5>
                        <p class="card-text text-muted">@book.Author</p>
                        <p class="card-text"><small class="text-muted">@book.ISBN</small></p>
                    </div>
                </div>
            </div>
        }
    </div>

    <nav aria-label="Page navigation example" class="mt-4">
        <ul class="pagination justify-content-center" id="pagination">
        </ul>
    </nav>

</form>

<script>
    const booksPerPage = 15;
    let currentPage = 1;
    let filteredBooks = [];

    document.addEventListener("DOMContentLoaded", function () {
        paginateBooks();
    });

    function paginateBooks() {
        const books = filteredBooks.length ? filteredBooks : document.querySelectorAll('.book-item');
        const totalBooks = books.length;
        const totalPages = Math.ceil(totalBooks / booksPerPage);

        books.forEach((book, index) => {
            book.style.display = (index >= (currentPage - 1) * booksPerPage && index < currentPage * booksPerPage) ? 'block' : 'none';
        });

        const pagination = document.getElementById('pagination');
        pagination.innerHTML = '';

        for (let i = 1; i <= totalPages; i++) {
            const li = document.createElement('li');
            li.classList.add('page-item');
            if (i === currentPage) {
                li.classList.add('active');
            }
            const a = document.createElement('a');
            a.classList.add('page-link');
            a.textContent = i;
            a.href = '#';
            a.addEventListener('click', function (e) {
                e.preventDefault();
                currentPage = i;
                paginateBooks();
            });
            li.appendChild(a);
            pagination.appendChild(li);
        }
    }

    function filterBooks() {
        const input = document.getElementById('searchInput').value.toLowerCase();
        const books = document.querySelectorAll('.book-item');
        filteredBooks = [];

        books.forEach(book => {
            const title = book.querySelector('.card-title').textContent.toLowerCase();
            const author = book.querySelector('.card-text').textContent.toLowerCase();
            const isbn = book.querySelector('small').textContent.toLowerCase();

            if (title.includes(input) || author.includes(input) || isbn.includes(input)) {
                book.style.display = 'block';
                filteredBooks.push(book);
            } else {
                book.style.display = 'none';
            }
        });

        currentPage = 1;
        paginateBooks();
    }
</script>
























